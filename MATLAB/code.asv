%% Cargando las señales de ECG
% Bradicardia: 100m del MIT-BIH Arrhythmia Database
% Fibrilación: 04015m del MIT-BIH Atrial Fibrillation Database

% Cargado de la señal de Bradicardia
load('100m.mat')

% En el archivo 100m.info se especifican que hay 2 señales capturadas
% en el archivo 100m.mat con una frecuencia de muestreo de 360 Hz y
% una ganancia de 200.
signal_MLII = val(1,:)/200;
signal_V5 = val(2,:)/200; % Se analizará esta señal
fs_b = 360;
N_b = length(signal_V5);
time_vector_b = 1/fs_b : 1/fs_b : (N_b*1/fs_b);

% Cargado de la señal de Fibrilación
load('04015m.mat')

% En el archivo 100m.info se especifican que hay 2 señales capturadas
% en el archivo 100m.mat con una frecuencia de muestreo de 250 Hz y
% una ganancia de 200.
signal_ECG1 = val(1,:)/200;
signal_ECG2 = val(2,:)/200; % Se analizará esta señal
fs_f = 250;
N_f = length(signal_ECG2);
time_vector_f = 1/fs_f : 1/fs_f : (N_f*1/fs_f);

%% Caracterizando las señales mediante FFT para identificar los ruidos
    
    figure(1)
% Caracterización Bradicardia
    % Graficando la señal original
    subplot(2,2,1)
    plot(time_vector_b,signal_V5)
    legend('Señal V5 - Bradicardia')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    title('Señal 100m - 60 segundos')

    %Utilizando FT y PSD para realizar una caracterización del comportamiento en
    %frecuencia de la señal
    x = fft(signal_V5);
    Nx = length(x);
    %Calculando potencia
    Px = (abs(x).^2)/(Nx*fs_b);
    fx = (0:N_b-1)'*fs_b/Nx;
    subplot(2,2,3)
    x_x = fx(1:floor(Nx/2));                     %Magnitud
    x_y = 10*log(Px(1:floor(Nx/2)));             %Potencia
    plot(x_x,x_y)
    title('Caracterización de la señal')
    xlabel('F (Hz)')
    ylabel('Potencia')
    hold on
    [peaks,loc] = findpeaks(x_y,'MinPeakDistance',1000);
    plot(fx(loc),peaks,'or')
    
% Caracterización Fibrilación
    % Graficando la señal original
    subplot(2,2,2)
    plot(time_vector_f,signal_ECG2)
    legend('Señal ECG2 - Fibrilación')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    title('Señal 04015m - 60 segundos')

    %Utilizando FT y PSD para realizar una caracterización del comportamiento en
    %frecuencia de la señal
    y = fft(signal_ECG2);
    Ny = length(y);
    %Calculando potencia
    Py = (abs(y).^2)/(Ny*fs_f);
    fy = (0:N_f-1)'*fs_f/Ny;
    subplot(2,2,4)
    y_x = fy(1:floor(Ny/2));                     %Magnitud
    y_y = 10*log(Py(1:floor(Ny/2)));             %Potencia
    plot(y_x,y_y)
    title('Caracterización de la señal')
    xlabel('F (Hz)')
    ylabel('Potencia')
    hold on
    [peaks,loc] = findpeaks(y_y,'MinPeakDistance',1000);
    plot(fy(loc),peaks,'or')

%% Diseñando y aplicando el filtro pasa bajo para la eliminación de ruido de alta frecuencia

% Diseño del filtro
    B = fir1(10,(1/(fs_b/2)), 'low');
    
    figure(2)
% Bradicardia
    output_b = filtfilt(B,1,signal_V5); 
    subplot(2,2,1)
    plot(time_vector_b,signal_V5)
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    legend('Señal V5 Original')
    title('Eliminando ruido de alta frecuencia')
    subplot(2,2,3)
    plot(time_vector_b, output_b)
    legend('Señal V5 filtro pasa bajo')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')

% Fibrilación    
    output_f = filtfilt(B,1,signal_ECG2); 
    subplot(2,2,2)
    plot(time_vector_f,signal_ECG2)
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    legend('Señal ECG2 Original')
    title('Eliminando ruido de alta frecuencia')
    subplot(2,2,4)
    plot(time_vector_f, output_f)
    legend('Señal ECG2 filtro pasa bajo')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')

%% Diseñando y aplicando el filtro tipo peine para la eliminación de los armónicos de 60 hz

% Diseño del filtro tipo peine
    N = 6;
    M = 60;
    b = zeros(1, N*M);
    b(1:N:end) = -1/M;
    b(1) = 1 - 1/M;
    
    figure(3)
% Bradicardia
    output_comb_b = filter(b,1,output_b);
    subplot(2,2,1)
    plot(time_vector_b,output_b)
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    legend('Señal V5 filtro pasa bajo')
    title('Antes de eliminar ruido estructurado 60 hz')
    subplot(2,2,3)
    plot(time_vector_b, output_comb_b)
    legend('Señal V5 filtro pasa bajo y tipo peine')
    title('Luego de eliminar ruido estructurado 60 hz')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    
% Fibrilación
    output_comb_f = filter(b,1,output_f);
    subplot(2,2,2)
    plot(time_vector_f,output_f)
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    legend('Señal ECG2 filtro pasa bajo')
    title('Antes de eliminar ruido estructurado 60 hz')
    subplot(2,2,4)
    plot(time_vector_f, output_comb_f)
    legend('Señal ECG2 filtro pasa bajo y tipo peine')
    title('Luego de eliminar ruido estructurado 60 hz')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')

%% Diseñando y aplicando el filtro pasa alto para eliminación de ruido de baja frecuencia


    B = fir1(10,(1/(fs_b/2)), 'high');
    
    output_final = filtfilt(B,1,output_comb_b); 
    subplot(2,1,1)
    plot(time_vector_b,signal_V5)
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')
    legend('Señal V5 Original')
    title('Eliminando ruido de baja frecuencia')
    subplot(2,1,2)
    plot(time_vector_b, output_final)
    legend('Señal V5 filtrada con filtro FIR método de ventana')
    xlabel('Tiempo (s)')
    ylabel('Amplitud (mV)')

%% Utilizando FT y PSD para realizar una caracterización del comportamiento en
%frecuencia de la señal
x = fft(output_final);
Nx = length(x);
%Calculando potencia
Px = (abs(x).^2)/(Nx*fs_b);
f = (0:N_b-1)'*fs_b/Nx;
figure(5)
x1 = f(1:floor(Nx/2)); %Magnitud
y1 = 10*log(Px(1:floor(Nx/2))); %Potencia
plot(x1,y1)
title('Caracterización del ruido')
xlabel('F (Hz)')
ylabel('Potencia')
hold on
[peaks,loc] = findpeaks(y1,'MinPeakDistance',1000);
plot(f(loc),peaks,'or')